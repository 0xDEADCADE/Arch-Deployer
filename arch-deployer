#!/bin/bash

# Name arguments
PKG=$1

if [[ -z $PKG ]]; then
	echo "Please provide a package name"
	echo "Usage:"
	echo "$0 \$PACKAGE"
	exit 1
fi

# Check if running on Arch Linux
OS_ID=$(cat /etc/os-release | grep "ID=" | grep -v "_" | cut -d "=" -f 2)
if [[ $OS_ID != "arch" ]]; then
	which arch-deployer-setup-chroot
	if [[ $? == 0 ]]; then
		arch-deployer-setup-chroot $1
	else
		bash ./arch-deployer-setup-chroot $1
	fi
	exit
fi

# Make a directory to contain all build files
mkdir -p ./${PKG}
cd ./${PKG}

# Make a pkgcache directory
# rm -rf ./pkgcache/ 2>/dev/null
mkdir ./pkgcache/
# Make an empty rootfs directory
sudo rm -rf ./rootfs/ 2>/dev/null
mkdir ./rootfs/

# Download packages to pkgcache
pactree -s -u ${PKG} | sudo pacman -Sw --cachedir ./pkgcache/ --noconfirm -

# Remove signatures and install packages in rootfs
sudo rm ./pkgcache/*.sig
sudo pacstrap -cGMU ./rootfs/ ./pkgcache/*

# Move rootfs to AppDir
sudo rm -rf ./${PKG}.AppDir
mv ./rootfs/ ./${PKG}.AppDir

# Download or compile libunionpreload (Prebuilt binary is only for x86_64)
if [[ $(uname -m) = "x86_64" ]]; then
	wget https://github.com/project-portable/libunionpreload/releases/download/amd64/libunionpreload.so
	chmod a+x libunionpreload.so
else
	wget https://raw.githubusercontent.com/project-portable/libunionpreload/master/libunionpreload.c
	gcc -shared -fPIC libunionpreload.c -o libunionpreload.so -ldl -DUNION_LIBNAME=\"libunionpreload.so\"
	strip libunionpreload.so
fi

# Move it into rootfs
mv ./libunionpreload.so ./${PKG}.AppDir/ 2>/dev/null

# Download AppImageTool
wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -m).AppImage -O ./appimagetool
chmod a+x ./appimagetool

# Create AppRun file
cat > ./${PKG}.AppDir/AppRun <<\EOF
#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export UNION_PRELOAD="${HERE}"
export LD_PRELOAD="${HERE}/libunionpreload.so"
export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${HERE}"/bin/:"${HERE}"/sbin/:"${PATH}"
export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/usr/lib32/:"${HERE}"/usr/lib64/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${HERE}"/lib32/:"${HERE}"/lib64/:"${LD_LIBRARY_PATH}"
export PYTHONPATH="${HERE}"/usr/share/pyshared/:"${PYTHONPATH}"
export PYTHONHOME="${HERE}"/usr/
export XDG_DATA_DIRS="${HERE}"/usr/share/:"${XDG_DATA_DIRS}"
export PERLLIB="${HERE}"/usr/share/perl5/:"${HERE}"/usr/lib/perl5/:"${PERLLIB}"
export GSETTINGS_SCHEMA_DIR="${HERE}"/usr/share/glib-2.0/schemas/:"${GSETTINGS_SCHEMA_DIR}"
export QT_PLUGIN_PATH="${HERE}"/usr/lib/qt4/plugins/:"${HERE}"/usr/lib/i386-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib32/qt4/plugins/:"${HERE}"/usr/lib64/qt4/plugins/:"${HERE}"/usr/lib/qt5/plugins/:"${HERE}"/usr/lib/i386-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib32/qt5/plugins/:"${HERE}"/usr/lib64/qt5/plugins/:"${QT_PLUGIN_PATH}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2- | sed -e 's|%.||g')
exec ${EXEC} "$@"
EOF
chmod a+x ./${PKG}.AppDir/AppRun

for ICONDIR in ./${PKG}.AppDir/usr/share/icons/hicolor/*; do
	if [[ -d ${ICONDIR} ]]; then
		cp ${ICONDIR}/apps/* ./${PKG}.AppDir/
	fi
done

cp ./${PKG}.AppDir/usr/share/applications/* ./${PKG}.AppDir/

echo "The directory ${PKG}.AppDir is ready!"

cd ../

echo "
############################################################################

 Opening the ${PKG}.AppDir directory, now it is possible to check 

 and manually fix any issues before exporting it to an AppImage. 

 To export ${PKG}.AppDir to an AppImage run the command:

    "ARCH=$(uname -m) ./${PKG}/appimagetool -n ./${PKG}/${PKG}.AppDir" 

 THIS COMMAND WILL BE EXECUTED AUTOMATICALLY IN THE NEXT STEP!

############################################################################

"

sleep 2
xdg-open ./${PKG}/${PKG}.AppDir 2>/dev/null

read -p "Automatically export ${PKG}.AppDir to an AppImage? [y/n] " yn
case $yn in
	[Yy]* ) echo "Creating AppImage..."; ARCH=$(uname -m) sudo ./${PKG}/appimagetool -n ./${PKG}/${PKG}.AppDir;
esac

echo "
############################################################################


                  THANK YOU FOR USING ARCH-DEPLOYER!

            SITE: https://github.com/0xDEADCADE/Arch-Deployer


############################################################################
"
